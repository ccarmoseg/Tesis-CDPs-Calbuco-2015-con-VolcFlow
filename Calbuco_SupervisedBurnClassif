// Definir el área de interés (AOI) alrededor del volcán Calbuco
var calbuco = ee.Geometry.Point([-72.614444, -41.326667]);
var aoi = calbuco.buffer(30000); // Buffer de 30km alrededor del volcán

// Variables globales
var trainingAreas = ee.FeatureCollection([]);
var currentClass = null;
var drawingMode = false;

// Función para calcular índices espectrales
function addIndices(image) {
  var ndvi = image.normalizedDifference(['NIR', 'RED']).rename('NDVI');
  var nbr = image.normalizedDifference(['NIR', 'SWIR2']).rename('NBR');
  var ndwi = image.normalizedDifference(['GREEN', 'NIR']).rename('NDWI');
  return image.addBands([ndvi, nbr, ndwi]);
}

// Colección de imágenes Landsat 8
var collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterBounds(aoi)
  .filterDate('2015-05-01', '2016-05-31')
  .filter(ee.Filter.lt('CLOUD_COVER', 20))
  .map(function(image) {
    return image.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'],
                       ['BLUE', 'GREEN', 'RED', 'NIR', 'SWIR1', 'SWIR2'])
      .multiply(0.0000275).add(-0.2)
      .clip(aoi);
  })
  .map(addIndices);

// Obtener imagen con menor cobertura de nubes
var image1 = ee.Image(collection.toList(1).get(0));

// Bandas para la clasificación
var bands = ['BLUE', 'GREEN', 'RED', 'NIR', 'SWIR1', 'SWIR2', 'NDVI', 'NBR', 'NDWI'];

// Mapeo de clases
var classMap = {
  'ceniza': 0,
  'bosque_1': 1,
  'bosque_2': 2,
  'poblado': 3,
  'caminos': 4,
  'veg_quemada': 5,
  'valle_inundado': 6
};

// Función para comenzar dibujo de polígono
function startDrawing(className) {
  currentClass = className;
  drawingMode = true;
  Map.style().set('cursor', 'crosshair');
  print('Dibujando polígono para: ' + className);
}

// Inicializar lista de coordenadas del polígono actual
var currentPolygon = [];

// Listener para dibujar polígonos
Map.onClick(function(coords) {
  if (drawingMode) {
    currentPolygon.push([coords.lon, coords.lat]);
    
    // Añadir un marcador provisional
    var marker = ui.Map.Layer(ee.Geometry.Point([coords.lon, coords.lat]), {color: 'red'});
    Map.layers().add(marker);
  }
});

// Botones de interfaz
var panel = ui.Panel({
  style: {width: '250px', position: 'top-right'}
});

// Botones para dibujar polígonos de cada clase
Object.keys(classMap).forEach(function(className) {
  var button = ui.Button({
    label: 'Dibujar ' + className.replace('_', ' '),
    onClick: function() {
      startDrawing(className);
    }
  });
  panel.add(button);
});

// Botón para finalizar polígono
var finishPolygonButton = ui.Button({
  label: 'Finalizar Polígono',
  onClick: function() {
    if (currentPolygon.length > 2 && currentClass !== null) {
      // Crear polígono
      var polygon = ee.Feature(
        ee.Geometry.Polygon(currentPolygon),
        {class: classMap[currentClass]}
      );
      
      // Añadir a la colección de áreas de entrenamiento
      trainingAreas = trainingAreas.merge(ee.FeatureCollection([polygon]));
      
      // Limpiar dibujo
      currentPolygon = [];
      drawingMode = false;
      Map.style().set('cursor', 'hand');
      
      print('Polígono de ' + currentClass + ' añadido');
      
      // Añadir capa al mapa
      Map.addLayer(polygon, {color: 'blue'}, currentClass);
    }
  }
});
panel.add(finishPolygonButton);

// Botón para clasificar
var clasificarButton = ui.Button({
  label: 'Ejecutar Clasificación',
  onClick: function() {
    // Generar muestras de entrenamiento
    var trainingSamples = image1.select(bands).sampleRegions({
      collection: trainingAreas,
      properties: ['class'],
      scale: 30
    });
    
    // Entrenar clasificador
    var classifier = ee.Classifier.smileRandomForest(100)
      .train({
        features: trainingSamples,
        classProperty: 'class',
        inputProperties: bands
      });
    
    // Aplicar clasificación
    var classified = image1.select(bands).classify(classifier);
    
    // Paleta de colores
    var palette = [
      'grey',      // ceniza
      'darkgreen', // bosque_1
      'green',     // bosque_2
      'brown',     // poblado
      'black',     // caminos
      'red',       // veg_quemada
      'blue'       // valle_inundado
    ];
    
    // Visualizar clasificación
    Map.addLayer(classified, {
      min: 0,
      max: 6,
      palette: palette
    }, 'Clasificación Multiclase');
    
    // Exportar
    Export.image.toDrive({
      image: classified,
      description: 'Calbuco_Classification_Poligonos',
      scale: 30,
      region: aoi,
      maxPixels: 1e13
    });
    
    print('Clasificación completada');
  }
});
panel.add(clasificarButton);

// Botones de exportación de índices
var indicesButtons = [
  {name: 'NDVI', description: 'Calbuco_NDVI'},
  {name: 'NBR', description: 'Calbuco_NBR'},
  {name: 'NDWI', description: 'Calbuco_NDWI'}
];

panel.add(ui.Label('Exportar Índices:'));
indicesButtons.forEach(function(indice) {
  var exportButton = ui.Button({
    label: 'Exportar ' + indice.name,
    onClick: function() {
      Export.image.toDrive({
        image: image1.select(indice.name),
        description: indice.description,
        scale: 30,
        region: aoi,
        maxPixels: 1e13
      });
      print('Exportación de ' + indice.name + ' iniciada');
    }
  });
  panel.add(exportButton);
});

// Añadir panel
Map.add(panel);

// Configuración inicial del mapa
Map.centerObject(aoi, 11);
Map.addLayer(image1, {bands: ['RED', 'GREEN', 'BLUE'], min: 0, max: 0.3}, 'Imagen Original');
